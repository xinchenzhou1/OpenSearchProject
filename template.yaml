AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: SAM Template to deploy index and search lambda functions, API Gateway and S3 bucket.

Parameters:
  TemplateBucket:
    Type: String
    Description: Name of the S3 bucket where stack files are being deployed
    Default: opensearch-templates-1234567890

  ProjectConstants:
    Type: String
    Description: Name of the file containing constants for the project
    Default: constants.yaml

  VPCStack:
    Type: String
    Description: Name of the vpc stack
    Default: networking

Mappings:
  ProjectParameters:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: # s3://<TemplateBucket>/constants.yaml
          !Join
            - ''
            - - 's3://'
              - !Ref TemplateBucket
              - '/'
              - !Ref ProjectConstants

Resources:
  IndexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: index-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: AccessRawDataBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: arn:aws:s3:::raw-data-*/**


  IndexLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: index_function/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 1024
      Timeout: 15
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              !Join
                - ''
                - - !Ref VPCStack
                  - "PublicSubnet"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Join
                - ''
                - - !Ref VPCStack
                  - "LambdaSecurityGroup"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AmazonS3FullAccess

  SearchLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search_function/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      MemorySize: 1024
      Timeout: 15
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              !Join
                - ''
                - - !Ref VPCStack
                  - "PublicSubnet"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Join
                - ''
                - - !Ref VPCStack
                  - "LambdaSecurityGroup"
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - AmazonS3FullAccess

  # Creates a S3 bucket to store raw (non-indexed) data
  RawRecordBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - raw-data-${AccountNumber}
        - AccountNumber: !Ref AWS::AccountId
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt IndexLambdaFunction.Arn
            
  S3InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IndexLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RawRecordBucket.Arn

  # Mannually add the notification-configuration to the raw-data S3 bucket